{"version":3,"sources":["pages/Counter.tsx","pages/Layout.tsx","tools/removeTrailingSlash.ts","pages/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isFalse","value","textCounterAtom","atom","key","default","countType","newlineCount","skipWhitespace","text","koreanReg","whitespaceReg","charCountState","selector","get","state","counted","i","length","char","test","isKorean","Layout","useRecoilState","textCounterState","setTextCounterState","useRecoilValue","maxW","h","rows","onChange","event","target","templateColumns","templateRows","gap","colSpan","icon","parseInt","isNaN","rowSpan","isChecked","removeTrailingSlash","url","replace","Navigation","prefix","history","useHistory","location","useLocation","as","w","IconButton","aria-label","Hamburger","variant","disabled","pathname","urljoin","onClick","stopPropagation","preventDefault","push","style","marginRight","justifyContent","flexGrow","App","path","Counter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAKMA,EAAU,SAACC,GAAD,OAAqBA,GAE/BC,EAAkBC,YAAK,CAC3BC,IAAK,kBACLC,QAAS,CACPC,UAAW,EACXC,aAAc,EACdC,gBAAgB,EAChBC,KAAM,MAIJC,EAAY,8CACZC,EAAgB,KAEhBC,EAAiBC,YAAS,CAC9BT,IAAK,iBACLU,IAAK,YAKH,IALiB,IACXC,GAAQD,EADE,EAAVA,KACYZ,GAEdc,EAAU,EAELC,EAAI,EAAGA,EAAIF,EAAMN,KAAKS,OAAQD,GAAK,EAAG,CAC7C,IAAME,EAAOJ,EAAMN,KAAKQ,GAExB,IAAIF,EAAMP,iBAAkBG,EAAcS,KAAKD,GAI/C,GAAa,OAATA,GAAwC,IAAvBJ,EAAMR,aAGpB,GAAa,OAATY,GAAwC,IAAvBJ,EAAMR,cAG3B,GAAa,OAATY,EAAJ,CAIP,IAAME,EAAWX,EAAUU,KAAKD,GAE5BE,GAAgC,IAApBN,EAAMT,UACpBU,GAAW,EACFhB,EAAQqB,IAAiC,IAApBN,EAAMT,UACpCU,GAAW,EACFK,GAAgC,IAApBN,EAAMT,UAC3BU,GAAW,EACFhB,EAAQqB,IAAiC,IAApBN,EAAMT,WAE3Be,GAAgC,IAApBN,EAAMT,UAD3BU,GAAW,EAGFhB,EAAQqB,IAAiC,IAApBN,EAAMT,UACpCU,GAAW,GAEXA,GAAW,QArBXA,GAAW,OAHXA,GAAW,EA4Bf,OAAOA,KAyEIM,EArEU,WACvB,MAAgDC,YAAerB,GAA/D,mBAAOsB,EAAP,KAAyBC,EAAzB,KACMT,EAAUU,YAAed,GAE/B,OACE,eAAC,IAAD,CAAWe,KAAK,eAAhB,UACE,cAAC,IAAD,CAAKC,EAAE,SAEP,eAAC,IAAD,WACE,cAAC,IAAD,CACE3B,MAAOuB,EAAiBf,KACxBoB,KAAM,GACNC,SAAU,SAACC,GACTN,EAAoB,2BAAKD,GAAN,IAAwBf,KAAMsB,EAAMC,OAAO/B,YAIlE,cAAC,IAAD,CAAK2B,EAAE,SAEP,eAAC,IAAD,CAAMK,gBAAgB,iBAAiBC,aAAa,iBAAiBC,IAAK,EAA1E,UACE,cAAC,IAAD,CAAUC,QAAS,EAAnB,SACE,eAAC,IAAD,CACEC,KAAM,cAAC,IAAD,IACNpC,MAAOuB,EAAiBlB,UACxBwB,SAAU,SAACC,GACT,IAAMzB,EAAYgC,SAASP,EAAMC,OAAO/B,MAAO,IAC/CwB,EAAoB,2BAAKD,GAAN,IAAwBlB,UAAWN,EAAQuC,MAAMjC,IAAcA,EAAY,MALlG,UAQE,wBAAQL,MAAM,IAAd,wEACA,wBAAQA,MAAM,IAAd,mFACA,wBAAQA,MAAM,IAAd,0GACA,wBAAQA,MAAM,IAAd,+GAIJ,eAAC,IAAD,CAAUuC,QAAS,EAAGJ,QAAS,EAA/B,UACGpB,EADH,kBAIA,cAAC,IAAD,CAAUoB,QAAS,EAAnB,SACE,eAAC,IAAD,CACEnC,MAAOuB,EAAiBjB,aACxBuB,SAAU,SAACC,GACT,IAAMxB,EAAe+B,SAASP,EAAMC,OAAO/B,MAAO,IAClDwB,EAAoB,2BAAKD,GAAN,IAAwBjB,aAAcP,EAAQuC,MAAMhC,IAAiBA,EAAe,MAJ3G,UAOE,wBAAQN,MAAM,IAAd,2DACA,wBAAQA,MAAM,IAAd,qDACA,wBAAQA,MAAM,IAAd,0DAIJ,eAAC,IAAD,CAAUmC,QAAS,EAAnB,UACE,cAAC,IAAD,CACEK,UAAWjB,EAAiBhB,eAC5BsB,SAAU,SAACC,GACTN,EAAoB,2BAAKD,GAAN,IAAwBhB,eAAgBR,EAAQwB,EAAiBhB,sBAGvF,sD,SCrHEc,EARU,WACvB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,uD,sECNC,SAASoB,EAAoBC,GAClC,OAAOA,EAAIC,QAAQ,MAAO,ICO5B,IA2DeC,EA3DkC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5CC,EAAUC,cACVC,EAAWC,cAEjB,OACE,eAAC,IAAD,CAAMC,GAAG,MAAT,UACE,cAAC,IAAD,CAAQvB,EAAE,OAAOwB,EAAE,OAAnB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYD,GAAIE,IAAYC,aAAW,UAAUjB,KAAM,cAACkB,EAAA,EAAD,IAAmBC,QAAQ,YAElF,eAAC,IAAD,WACE,cAAC,IAAD,CACEnB,KAAM,cAAC,IAAD,IACNc,GAAG,MACHM,SAAUf,EAAoBO,EAASS,YAAchB,EAAoBiB,IAAQb,EAAQ,MACzFc,QAAS,SAAC7B,GACRA,EAAM8B,kBACN9B,EAAM+B,iBAEFpB,EAAoBO,EAASS,YAAchB,EAAoBiB,IAAQb,EAAQ,OAInFC,EAAQgB,KAAK,CAAEL,SAAUhB,EAAoBiB,IAAQb,EAAQ,SAZjE,8CAkBA,cAAC,IAAD,CACET,KAAM,cAAC,IAAD,IACNc,GAAG,MACHM,SAAUf,EAAoBO,EAASS,YAAchB,EAAoBiB,IAAQb,EAAQ,YACzFc,QAAS,SAAC7B,GACRA,EAAM8B,kBACN9B,EAAM+B,iBAEFpB,EAAoBO,EAASS,YAAchB,EAAoBiB,IAAQb,EAAQ,aAInFC,EAAQgB,KAAK,CAAEL,SAAUhB,EAAoBiB,IAAQb,EAAQ,eAZjE,2DAqBN,cAAC,IAAD,CAAQkB,MAAO,CAAEC,YAAa,GAAIC,eAAgB,SAAUC,SAAU,GAAtE,SACE,eAAC,IAAD,CAAShB,GAAG,KAAZ,wCACUF,EAASS,WAAahB,EAAoBiB,IAAQb,EAAQ,MAAQ,mCAAY,iDCnD1FA,EAAS,aAqBAsB,EAnBO,WACpB,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAYtB,OAAQA,IAIpB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuB,KAAM3B,EAAoBiB,IAAQb,EAAQ,YAAjD,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOuB,KAAM3B,EAAoBiB,IAAQb,EAAQ,MAAjD,SACE,cAACwB,EAAD,aCTKC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.78025eef.chunk.js","sourcesContent":["import { Box, Container, FormControl, Grid, GridItem, Select, Switch, Textarea } from '@chakra-ui/react';\nimport React from 'react';\nimport { atom, selector, useRecoilState, useRecoilValue } from 'recoil';\nimport { MdArrowDropDown } from 'react-icons/md';\n\nconst isFalse = (value: boolean) => !value;\n\nconst textCounterAtom = atom({\n  key: 'textCounterAtom',\n  default: {\n    countType: 1,\n    newlineCount: 1,\n    skipWhitespace: true,\n    text: '',\n  },\n});\n\nconst koreanReg = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\nconst whitespaceReg = /\\s/;\n\nconst charCountState = selector({\n  key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n  get: ({ get }) => {\n    const state = get(textCounterAtom);\n\n    let counted = 0;\n\n    for (let i = 0; i < state.text.length; i += 1) {\n      const char = state.text[i];\n\n      if (state.skipWhitespace && whitespaceReg.test(char)) {\n        continue;\n      }\n\n      if (char === '\\n' && state.newlineCount === 2) {\n        counted += 1;\n        continue;\n      } else if (char === '\\n' && state.newlineCount === 3) {\n        counted += 2;\n        continue;\n      } else if (char === '\\n') {\n        continue;\n      }\n\n      const isKorean = koreanReg.test(char);\n\n      if (isKorean && state.countType === 4) {\n        counted += 3;\n      } else if (isFalse(isKorean) && state.countType === 4) {\n        counted += 1;\n      } else if (isKorean && state.countType === 3) {\n        counted += 2;\n      } else if (isFalse(isKorean) && state.countType === 3) {\n        counted += 1;\n      } else if (isKorean && state.countType === 2) {\n        counted += 1;\n      } else if (isFalse(isKorean) && state.countType === 2) {\n        counted += 0.5;\n      } else {\n        counted += 1;\n      }\n    }\n\n    return counted;\n  },\n});\n\nconst Layout: React.FC = () => {\n  const [textCounterState, setTextCounterState] = useRecoilState(textCounterAtom);\n  const counted = useRecoilValue(charCountState);\n\n  return (\n    <Container maxW=\"container.lg\">\n      <Box h=\"20px\" />\n\n      <Box>\n        <Textarea\n          value={textCounterState.text}\n          rows={10}\n          onChange={(event) => {\n            setTextCounterState({ ...textCounterState, text: event.target.value });\n          }}\n        />\n\n        <Box h=\"10px\" />\n\n        <Grid templateColumns=\"repeat(6, 1fr)\" templateRows=\"repeat(3, 1fr)\" gap={4}>\n          <GridItem colSpan={4}>\n            <Select\n              icon={<MdArrowDropDown />}\n              value={textCounterState.countType}\n              onChange={(event) => {\n                const countType = parseInt(event.target.value, 10);\n                setTextCounterState({ ...textCounterState, countType: isFalse(isNaN(countType)) ? countType : 1 });\n              }}\n            >\n              <option value=\"1\">모든 글자 1글자로 계산</option>\n              <option value=\"2\">한글 1글자, 영문 0.5글자 계산</option>\n              <option value=\"3\">바이트로 계산, 한글 2글자 영문 1글자</option>\n              <option value=\"4\">바이트로 계산, 한글 3글자 영문 1글자</option>\n            </Select>\n          </GridItem>\n\n          <GridItem rowSpan={3} colSpan={2}>\n            {counted}글자\n          </GridItem>\n\n          <GridItem colSpan={4}>\n            <Select\n              value={textCounterState.newlineCount}\n              onChange={(event) => {\n                const newlineCount = parseInt(event.target.value, 10);\n                setTextCounterState({ ...textCounterState, newlineCount: isFalse(isNaN(newlineCount)) ? newlineCount : 1 });\n              }}\n            >\n              <option value=\"1\">줄바꿈 0으로 계산</option>\n              <option value=\"2\">줄바꿈 1로 계산</option>\n              <option value=\"3\">줄바꿈 2로 계산</option>\n            </Select>\n          </GridItem>\n\n          <GridItem colSpan={4}>\n            <Switch\n              isChecked={textCounterState.skipWhitespace}\n              onChange={(event) => {\n                setTextCounterState({ ...textCounterState, skipWhitespace: isFalse(textCounterState.skipWhitespace) });\n              }}\n            />\n            {' 띄어쓰기 제외'}\n          </GridItem>\n        </Grid>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Container, Heading } from '@chakra-ui/react';\n\nconst Layout: React.FC = () => {\n  return (\n    <Container>\n      <Heading>문장 배열하기</Heading>\n    </Container>\n  );\n};\n\nexport default Layout;\n","export function removeTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '');\n}\n","import { HamburgerIcon } from '@chakra-ui/icons';\nimport { Center, Flex, Heading, IconButton, Menu, MenuButton, MenuItem, MenuList, Square } from '@chakra-ui/react';\nimport React from 'react';\nimport { FaListOl, FaSlidersH } from 'react-icons/fa';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from '../tools/removeTrailingSlash';\n\nconst Navigation: React.FC<{ prefix: string }> = ({ prefix }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Flex as=\"nav\">\n      <Center h=\"50px\" w=\"50px\">\n        <Menu>\n          <MenuButton as={IconButton} aria-label=\"Options\" icon={<HamburgerIcon />} variant=\"outline\" />\n\n          <MenuList>\n            <MenuItem\n              icon={<FaListOl />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/')) });\n              }}\n            >\n              글자 수 세기\n            </MenuItem>\n\n            <MenuItem\n              icon={<FaSlidersH />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/layout')) });\n              }}\n            >\n              문장 배열하기\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Center>\n\n      <Square style={{ marginRight: 35, justifyContent: 'center', flexGrow: 1 }}>\n        <Heading as=\"h1\">\n          서예 도움: {location.pathname === removeTrailingSlash(urljoin(prefix, '/')) ? '글자 수 세기' : '문장 배열하기'}\n        </Heading>\n      </Square>\n    </Flex>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Counter from './pages/Counter';\nimport Layout from './pages/Layout';\nimport Navigation from './pages/Navigation';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from './tools/removeTrailingSlash';\n\nconst prefix = '/seoyedoum';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Navigation prefix={prefix} />\n\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/layout'))}>\n          <Layout />\n        </Route>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/'))}>\n          <Counter />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}