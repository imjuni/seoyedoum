{"version":3,"sources":["pages/Counter.tsx","shared/components/ContentBox.tsx","shared/components/ControlBox.tsx","shared/components/ResizeBox.tsx","pages/Layout.tsx","tools/removeTrailingSlash.ts","pages/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx","tools/calculator.ts","recoil/atom/counter.ts","recoil/selector/counter.ts","tools/llc.ts"],"names":["log","llc","__filename","Counter","useRecoilState","textCounterAtom","textCounterState","setTextCounterState","textLayoutAtom","textLayoutState","setTextLayoutState","windowSizeAtom","windowSizeState","counted","useRecoilValue","charCountState","koreanChars","onlyKoreanCharCountSelector","subject","Subject","shared","pipe","share","debounceTime","subscribe","topic","length","getKorean","letters","getLetterLayout","map","layout","sort","left","right","maxColSize","size","getMarginSize","width","height","getRectSize","margin","widths","heights","maxRowSize","character","content","Fragment","maxW","h","value","rows","onChange","event","next","target","templateColumns","templateRows","gap","colSpan","icon","charCountType","parseInt","isFalse","isNaN","rowSpan","newlineCountType","isChecked","isSkipWhitespacee","colorScheme","onClick","ContentBox","direction","style","visibility","paddingLeft","paddingRight","ii","marginRight","jj","padding","lineHeight","fontSize","transform","scale","ControlBox","onHandleLeftShiftLetter","index","currentTarget","dataset","isTrue","letter","pop","isNotEmpty","onHandleRightShiftLetter","onHandleSplitLetter","head","slice","Math","floor","tail","headLetters","tailLetters","newLetters","w","marginBottom","populate","data-index","type","readOnly","disabled","ResizeBox","setWindowSizeState","throttleTime","filter","newSize","getPaperHeight","useEffect","window","addEventListener","innerWidth","innerHeight","display","Layout","removeTrailingSlash","url","replace","Navigation","prefix","history","useHistory","location","useLocation","as","IconButton","aria-label","Hamburger","variant","pathname","urljoin","stopPropagation","preventDefault","push","justifyContent","flexGrow","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","koreanReg","ceil","getCharHeights","rowSize","charHeight","koreans","langLayout","getDoubleDimensionContent","newColSize","contentFrom","row","minRowSize","colSize","percent","lastColInfos","ratio","sortedInfo","info","first","getLastLineResize","refinedKoreans","reverse","marginSize","round","charSize","charCountMedian","counts","reduce","prev","current","getCharCountMedian","charWidth","getCharWidths","widthsWithMargin","sizeFrom","marginCount","marginWidth","rawMarginWidth","clonedMarginWidth","shift","getCharWidthWithMargins","isKoreanChar","test","err","message","stack","split","char","koreansFrom","rowsLength","Array","isArray","chunk","base","atom","key","default","whitespaceReg","selector","get","state","i","isKorean","filename"],"mappings":"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","file":"static/js/main.2f4f7d0c.chunk.js","sourcesContent":["import { Box, Button, Container, Grid, GridItem, Select, Switch, Textarea } from '@chakra-ui/react';\nimport { isFalse } from 'my-easy-fp';\nimport React from 'react';\nimport { MdArrowDropDown } from 'react-icons/md';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Subject } from 'rxjs';\nimport { debounceTime, share } from 'rxjs/operators';\nimport { textCounterAtom, textLayoutAtom, windowSizeAtom } from '../recoil/atom/counter';\nimport { charCountState, onlyKoreanCharCountSelector } from '../recoil/selector/counter';\nimport ContentBox from '../shared/components/ContentBox';\nimport ControlBox from '../shared/components/ControlBox';\nimport ResizeBox from '../shared/components/ResizeBox';\nimport { getKorean, getLetterLayout, getMarginSize, getRectSize } from '../tools/calculator';\nimport llc from '../tools/llc';\n\nconst log = llc(__filename);\n\nconst Counter: React.FC = () => {\n  const [textCounterState, setTextCounterState] = useRecoilState(textCounterAtom);\n  const [textLayoutState, setTextLayoutState] = useRecoilState(textLayoutAtom);\n  const [windowSizeState] = useRecoilState(windowSizeAtom);\n  const counted = useRecoilValue(charCountState);\n  const koreanChars = useRecoilValue(onlyKoreanCharCountSelector);\n\n  const subject = new Subject<string>();\n  const shared = subject.pipe(share());\n\n  shared.pipe(debounceTime(1000)).subscribe((topic) => {\n    if (topic.length < 10) {\n      return;\n    }\n\n    if (getKorean(topic).length < 10) {\n      return;\n    }\n\n    const letters = getLetterLayout(topic);\n    const [maxColSize] = letters.map((layout) => layout.length).sort((left, right) => right - left);\n    const size = getMarginSize({ letters, size: { width: windowSizeState.width, height: windowSizeState.height } });\n    const { widths, heights } = getRectSize({\n      size: { width: size.width, height: windowSizeState.height },\n      letters,\n      margin: {\n        left: size.margin.left,\n        right: size.margin.right,\n      },\n    });\n\n    log('레이아웃 저장함 :) ', size.margin);\n\n    setTextLayoutState({\n      ...textLayoutState,\n      maxColSize,\n      maxRowSize: letters.length,\n      letters: letters,\n      character: {\n        widths,\n        heights,\n        margin: size.margin,\n      },\n    });\n  });\n\n  shared.subscribe((topic) => {\n    setTextCounterState({ ...textCounterState, content: topic });\n  });\n\n  return (\n    <React.Fragment>\n      <Container maxW=\"container.lg\">\n        <Box h=\"20px\" />\n\n        <Box>\n          <Textarea value={textCounterState.content} rows={10} onChange={(event) => subject.next(event.target.value)} />\n\n          <Box h=\"10px\" />\n\n          <Grid templateColumns=\"repeat(6, 1fr)\" templateRows=\"repeat(3, 1fr)\" gap={4}>\n            <GridItem colSpan={4}>\n              <Select\n                icon={<MdArrowDropDown />}\n                value={textCounterState.charCountType}\n                onChange={(event) => {\n                  const charCountType = parseInt(event.target.value, 10);\n                  setTextCounterState({\n                    ...textCounterState,\n                    charCountType: isFalse(isNaN(charCountType)) ? charCountType : 1,\n                  });\n                }}\n              >\n                <option value=\"1\">모든 글자 1글자로 계산</option>\n                <option value=\"2\">한글 1글자, 영문 0.5글자 계산</option>\n                <option value=\"3\">바이트로 계산, 한글 2글자 영문 1글자</option>\n                <option value=\"4\">바이트로 계산, 한글 3글자 영문 1글자</option>\n              </Select>\n            </GridItem>\n\n            <GridItem rowSpan={2} colSpan={2}>\n              <section>\n                <span>{counted}글자</span>\n                <br />\n                <span>{koreanChars}글자(한글)</span>\n              </section>\n            </GridItem>\n\n            <GridItem colSpan={4}>\n              <Select\n                value={textCounterState.newlineCountType}\n                onChange={(event) => {\n                  const newlineCountType = parseInt(event.target.value, 10);\n                  setTextCounterState({\n                    ...textCounterState,\n                    newlineCountType: isFalse(isNaN(newlineCountType)) ? newlineCountType : 1,\n                  });\n                }}\n              >\n                <option value=\"1\">줄바꿈 0으로 계산</option>\n                <option value=\"2\">줄바꿈 1로 계산</option>\n                <option value=\"3\">줄바꿈 2로 계산</option>\n              </Select>\n            </GridItem>\n\n            <GridItem colSpan={4}>\n              <Switch\n                isChecked={textCounterState.isSkipWhitespacee}\n                onChange={() => {\n                  setTextCounterState({\n                    ...textCounterState,\n                    isSkipWhitespacee: isFalse(textCounterState.isSkipWhitespacee),\n                  });\n                }}\n              />\n              {' 띄어쓰기 제외'}\n            </GridItem>\n\n            <GridItem>\n              <Button\n                colorScheme=\"teal\"\n                size=\"md\"\n                onClick={() => {\n                  subject.next(textCounterState.content);\n                }}\n              >\n                다시 계산하기\n              </Button>\n            </GridItem>\n          </Grid>\n\n          <Box h=\"10px\" />\n        </Box>\n      </Container>\n\n      <ControlBox />\n      <ContentBox />\n      <ResizeBox />\n    </React.Fragment>\n  );\n};\n\nexport default Counter;\n","import { Flex } from '@chakra-ui/react';\nimport React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { textLayoutAtom, windowSizeAtom } from '../../recoil/atom/counter';\nimport { onlyKoreanCharCountSelector } from '../../recoil/selector/counter';\n\nconst ContentBox: React.FC = () => {\n  const [windowSizeState] = useRecoilState(windowSizeAtom);\n  const [textLayoutState] = useRecoilState(textLayoutAtom);\n  const koreanChars = useRecoilValue(onlyKoreanCharCountSelector);\n\n  return (\n    <Flex\n      direction=\"row\"\n      style={{\n        visibility: koreanChars > 20 ? 'visible' : 'hidden',\n        width: `${windowSizeState.width}px`,\n        height: `${windowSizeState.height}px`,\n        paddingLeft: `${textLayoutState.character.margin.left}px`,\n        paddingRight: `${textLayoutState.character.margin.right}px`,\n      }}\n    >\n      {textLayoutState.character.widths.map((width, ii) => {\n        return (\n          <div\n            key={`col-${ii}`}\n            style={{ width: `${width.width}px`, marginRight: `${width.margin}px`, height: `${windowSizeState.height}px}` }}\n          >\n            {textLayoutState.character.heights[ii].map((height, jj) => {\n              return (\n                <div key={`row-${ii}-${jj}`} style={{ width: `${width.width}px`, height: `${height.height}px` }}>\n                  <p\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      lineHeight: 1,\n                      fontSize: `${width.width}px`,\n                      transform: `scaleY(${height.scale / 100})`,\n                    }}\n                  >\n                    {textLayoutState.letters[ii][jj]}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default ContentBox;\n","import { Button, Grid, GridItem, Input } from '@chakra-ui/react';\nimport { isFalse, isNotEmpty, isTrue, populate } from 'my-easy-fp';\nimport React from 'react';\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa';\nimport { AiOutlineSplitCells } from 'react-icons/ai';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { textLayoutAtom, windowSizeAtom } from '../../recoil/atom/counter';\nimport { onlyKoreanCharCountSelector } from '../../recoil/selector/counter';\nimport { getMarginSize, getRectSize } from '../../tools/calculator';\n\nconst ControlBox: React.FC = () => {\n  const [windowSizeState] = useRecoilState(windowSizeAtom);\n  const [textLayoutState, setTextLayoutState] = useRecoilState(textLayoutAtom);\n  const koreanChars = useRecoilValue(onlyKoreanCharCountSelector);\n\n  const onHandleLeftShiftLetter = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const index = parseInt(event.currentTarget.dataset.index ?? 'NaN', 10);\n\n    if (isTrue(isNaN(index))) {\n      return false;\n    }\n\n    const letters = [...textLayoutState.letters.map((layout) => [...layout])];\n    const letter = letters[index].pop();\n\n    if (index - 1 >= 0 && isNotEmpty(letter)) {\n      letters[index - 1] = [letter, ...letters[index - 1]];\n    }\n\n    const size = getMarginSize({ letters, size: { width: windowSizeState.width, height: windowSizeState.height } });\n    const { widths, heights } = getRectSize({\n      size: { width: size.width, height: windowSizeState.height },\n      letters,\n      margin: size.margin,\n    });\n\n    setTextLayoutState({ ...textLayoutState, letters: letters, character: { widths, heights, margin: size.margin } });\n  };\n\n  const onHandleRightShiftLetter = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const index = parseInt(event.currentTarget.dataset.index ?? 'NaN', 10);\n\n    if (isTrue(isNaN(index))) {\n      return false;\n    }\n\n    const letters = [...textLayoutState.letters.map((layout) => [...layout])];\n    const letter = letters[index].pop();\n\n    if (index + 1 < letters.length && isNotEmpty(letter)) {\n      letters[index + 1] = [letter, ...letters[index + 1]];\n    }\n\n    const size = getMarginSize({ letters, size: { width: windowSizeState.width, height: windowSizeState.height } });\n    const { widths, heights } = getRectSize({\n      size: { width: size.width, height: windowSizeState.height },\n      letters,\n      margin: size.margin,\n    });\n\n    setTextLayoutState({ ...textLayoutState, letters: letters, character: { widths, heights, margin: size.margin } });\n  };\n\n  const onHandleSplitLetter = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const index = parseInt(event.currentTarget.dataset.index ?? 'NaN', 10);\n\n    if (isTrue(isNaN(index))) {\n      return false;\n    }\n\n    const letters = [...textLayoutState.letters.map((layout) => [...layout])];\n    const head = letters[index].slice(0, Math.floor(letters.length / 2));\n    const tail = letters[index].slice(Math.floor(letters.length / 2), letters.length);\n\n    const headLetters = letters.slice(0, index);\n    const tailLetters = letters.slice(index + 1, letters.length);\n    const newLetters = [...headLetters, head, tail, ...tailLetters];\n\n    const size = getMarginSize({ letters, size: { width: windowSizeState.width, height: windowSizeState.height } });\n    const { widths, heights } = getRectSize({\n      size: { width: size.width, height: windowSizeState.height },\n      letters: newLetters,\n      margin: size.margin,\n    });\n\n    setTextLayoutState({ ...textLayoutState, letters: newLetters, character: { widths, heights, margin: size.margin } });\n  };\n\n  return (\n    <Grid\n      w={`${windowSizeState.width}px`}\n      marginBottom=\"30\"\n      paddingLeft={textLayoutState.character.margin.left}\n      paddingRight={textLayoutState.character.margin.right}\n      style={{ visibility: koreanChars > 20 ? 'visible' : 'hidden' }}\n      templateColumns={`repeat(${textLayoutState.maxRowSize}, 1fr)`}\n      templateRows={`repeat(3, 1fr)`}\n      gap={0}\n    >\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Input\n              data-index={index}\n              type=\"number\"\n              paddingLeft=\"5px\"\n              readOnly={true}\n              paddingRight=\"5px\"\n              size=\"md\"\n              value={textLayoutState.letters[index].length}\n              onChange={() => {}}\n            />\n          </GridItem>\n        );\n      })}\n\n      {/* 좌측으로 글자를 보낸다  */}\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Button data-index={index} disabled={index === 0} onClick={onHandleLeftShiftLetter}>\n              <FaAngleLeft />\n            </Button>\n          </GridItem>\n        );\n      })}\n\n      {/* 우측으로 글자를 보낸다 */}\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Button\n              data-index={index}\n              disabled={index === textLayoutState.maxRowSize - 1}\n              onClick={onHandleRightShiftLetter}\n            >\n              <FaAngleRight />\n            </Button>\n          </GridItem>\n        );\n      })}\n\n      {/* 줄을 분할한다 */}\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Button\n              data-index={index}\n              disabled={isFalse(index !== 0 && textLayoutState.letters[index].length > 2)}\n              onClick={onHandleSplitLetter}\n            >\n              <AiOutlineSplitCells />\n            </Button>\n          </GridItem>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default ControlBox;\n","import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { Subject } from 'rxjs';\nimport { debounceTime, filter, throttleTime } from 'rxjs/operators';\nimport { textLayoutAtom, windowSizeAtom } from '../../recoil/atom/counter';\nimport type { IWindowSizeState } from '../../recoil/atom/ICounterState';\nimport { getMarginSize, getPaperHeight, getRectSize } from '../../tools/calculator';\nimport llc from '../../tools/llc';\n\nconst log = llc(__filename);\n\nconst ResizeBox: React.FC = () => {\n  const [windowSizeState, setWindowSizeState] = useRecoilState(windowSizeAtom);\n  const [textLayoutState, setTextLayoutState] = useRecoilState(textLayoutAtom);\n  // subject를 useEffect에 넣으면 windowSizeState가 변하면서 subject를 계속 건드려서 resizing이 매우 많이 발생하게 된다\n  const subject = new Subject<Omit<IWindowSizeState, 'margin'>>();\n\n  subject\n    .pipe(throttleTime(100))\n    .pipe(debounceTime(300))\n    .pipe(filter((size) => size.height !== windowSizeState.height || size.width !== windowSizeState.width))\n    .subscribe((newSize) => {\n      log('윈도우 폭 변경: ', newSize.width, newSize.height);\n      const size = getMarginSize({\n        size: { width: windowSizeState.width, height: windowSizeState.height },\n        letters: textLayoutState.letters,\n      });\n\n      const { widths, heights } = getRectSize({\n        size: { width: size.width, height: newSize.height },\n        letters: textLayoutState.letters,\n        margin: size.margin,\n      });\n\n      setTextLayoutState({\n        ...textLayoutState,\n        character: {\n          widths,\n          heights,\n          margin: size.margin,\n        },\n      });\n\n      setWindowSizeState({\n        ...windowSizeState,\n        width: size.width,\n        height: getPaperHeight(newSize.width),\n      });\n    });\n\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      subject.next({ width: window.innerWidth, height: window.innerHeight });\n    });\n\n    setWindowSizeState({ ...windowSizeState, width: window.innerWidth, height: getPaperHeight(window.innerWidth) });\n  }, []); // eslint-disable-line\n\n  return <div style={{ display: 'none' }}></div>;\n};\n\nexport default ResizeBox;\n","import React from 'react';\nimport { Container, Heading } from '@chakra-ui/react';\n\nconst Layout: React.FC = () => {\n  return (\n    <Container>\n      <Heading>문장 배열하기</Heading>\n    </Container>\n  );\n};\n\nexport default Layout;\n","export function removeTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '');\n}\n","import { HamburgerIcon } from '@chakra-ui/icons';\nimport { Center, Flex, Heading, IconButton, Menu, MenuButton, MenuItem, MenuList, Square } from '@chakra-ui/react';\nimport React from 'react';\nimport { FaListOl, FaSlidersH } from 'react-icons/fa';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from '../tools/removeTrailingSlash';\n\nconst Navigation: React.FC<{ prefix: string }> = ({ prefix }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Flex as=\"nav\">\n      <Center h=\"50px\" w=\"50px\">\n        <Menu>\n          <MenuButton as={IconButton} aria-label=\"Options\" icon={<HamburgerIcon />} variant=\"outline\" />\n\n          <MenuList>\n            <MenuItem\n              icon={<FaListOl />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/')) });\n              }}\n            >\n              글자 수 세기\n            </MenuItem>\n\n            <MenuItem\n              icon={<FaSlidersH />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/layout')) });\n              }}\n            >\n              문장 배열하기\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Center>\n\n      <Square style={{ marginRight: 35, justifyContent: 'center', flexGrow: 1 }}>\n        <Heading as=\"h1\">\n          서예 도움: {location.pathname === removeTrailingSlash(urljoin(prefix, '/')) ? '글자 수 세기' : '문장 배열하기'}\n        </Heading>\n      </Square>\n    </Flex>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Counter from './pages/Counter';\nimport Layout from './pages/Layout';\nimport Navigation from './pages/Navigation';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from './tools/removeTrailingSlash';\n\nconst prefix = '/seoyedoum';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Navigation prefix={prefix} />\n\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/layout'))}>\n          <Layout />\n        </Route>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/'))}>\n          <Counter />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { chunk, isNotEmpty, isTrue, populate } from 'my-easy-fp';\nimport llc from './llc';\n\nexport const MEDIAN_KOREAN_CHAR_ROW_LENGTH = 20;\nexport const LETTER_CONTENT_LEFT_MARGIN = 14;\nexport const LETTER_CONTENT_RIGHT_MARGIN = 14;\n\nconst koreanReg = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\nconst log = llc(__filename);\n\nexport function getCharCountMedian(counts: number[]) {\n  const [, ...tail] = counts.sort((left, right) => left - right);\n  return Math.floor(tail.reduce((prev, current) => prev + current) / (counts.length - 1));\n}\n\n/**\n * 전지는 A형(630 X 960 mm)과 B형 (780 X 1080 mm)이 있다. 자르는 횟수에 따라 숫자가 붙어 종이의 이름이 결정된다.\n * 예를들어 A1를 반으로 잘라서 두개로 나누면 A2이다. A형을 4등분(절)해서 나오는 크기가 가장 많이 사용하는 A4용지 이다.\n * @param width 폭\n */\nexport function getPaperHeight(width: number): number {\n  return Math.floor(Math.ceil(width * 1.52));\n}\n\n/**\n *\n * @param size 가로 전체 길이 (px)\n * @param colSize 가로에 몇 줄을 넣을 건지\n * @returns\n */\nexport function getCharWidths(size: number, colSize: number): number[] {\n  if (size / colSize === 0) {\n    return populate(colSize).map(() => size / colSize);\n  }\n\n  const charWidth = Math.floor(size / colSize);\n  const remainWidth = size - charWidth * (colSize - 1);\n\n  return [remainWidth, ...populate(colSize - 1).map(() => charWidth)];\n}\n\n/**\n *\n * @param sizeFrom 마진 전체 길이\n * @param widths 계산된 가로 폭 배열\n * @returns\n */\nexport function getCharWidthWithMargins(sizeFrom: number, widths: number[]): Array<{ width: number; margin: number }> {\n  const marginCount = widths.length - 1;\n  const size = sizeFrom;\n\n  if (marginCount <= 0) {\n    return [];\n  }\n\n  const marginWidth = (() => {\n    const rawMarginWidth = size / marginCount;\n\n    if (size / marginCount === 0) {\n      return populate(marginCount).map(() => rawMarginWidth);\n    }\n\n    const marginWidth = Math.floor(rawMarginWidth);\n    const remainMarginWidth = size - marginWidth * (marginCount - 1);\n    return [remainMarginWidth, ...populate(marginCount - 1).map(() => marginWidth)];\n  })();\n\n  const clonedMarginWidth = [...marginWidth];\n\n  const charWidthWithMargins = widths.map((width) => {\n    return {\n      width,\n      margin: clonedMarginWidth.shift() ?? 0,\n    };\n  });\n\n  return charWidthWithMargins;\n}\n\n/**\n *\n * @param size 세로 전체 길이(px)\n * @param rowSize 몇 글자 들어가는지 전달\n * @param width 이미 계산된 한 글자의 폭\n */\nexport function getCharHeights(size: number, rowSize: number, width: number): Array<{ height: number; scale: number }> {\n  if (size / rowSize === 0) {\n    return populate(rowSize).map(() => {\n      const height = size / rowSize;\n\n      return {\n        height,\n        scale: Math.floor((height * 100) / width),\n      };\n    });\n  }\n\n  const charHeight = Math.floor(size / rowSize);\n  const remainHeight = size - charHeight * (rowSize - 1);\n\n  const heights = [remainHeight, ...populate(rowSize - 1).map(() => charHeight)];\n\n  return heights.map((height) => {\n    return {\n      height,\n      scale: Math.floor((height * 100) / width),\n    };\n  });\n}\n\nexport function flating(contentFrom: string[][]) {\n  const content = contentFrom.map((row) => [...row]);\n  const [maxSize] = content.map((row) => row.length).sort((left, right) => right - left);\n  const [maxSize2] = content.map((row) => row.length).sort((left, right) => left - right);\n\n  log('[flating]maxSize: ', maxSize, maxSize2);\n\n  return content\n    .map((row) => {\n      if (maxSize > row.length) {\n        return [...populate(maxSize - row.length).map(() => ''), ...row];\n      } else {\n        return row;\n      }\n    })\n    .flatMap((value) => value);\n}\n\n/**\n * 평문 입력된 시를 한글만 추려내서 2차원 배열로 변환\n *\n * @param content 입력한 시 내용\n * @returns 시를 적절한 레이아웃으로 재편해서 이차원 배열로 만듬\n */\nexport function getLetterLayout(content: string): string[][] {\n  const koreans = getKorean(content);\n  const langLayout = getDoubleDimensionContent(koreans, 20);\n  const newColSize = getLastLineResize(langLayout);\n  const refinedKoreans = isNotEmpty(newColSize) ? getDoubleDimensionContent(koreans, newColSize) : langLayout;\n  const reversed = [...refinedKoreans].reverse();\n\n  return reversed;\n}\n\ninterface IInpMarginSize {\n  letters: string[][];\n  size: {\n    width: number;\n    height: number;\n  };\n}\n\nexport function getMarginSize({ letters, size }: IInpMarginSize) {\n  // 작은 종이\n  if (letters.length < 7) {\n    const width = size.width / 2;\n    const margin = size.width % 2 !== 0 ? size.width / 2 - 1 : size.width / 2;\n\n    log('폭: ', width, '마진: ', margin);\n\n    return {\n      width: size.width % 2 !== 0 ? width + 1 : width,\n      margin: {\n        left: margin / 2,\n        right: margin / 2,\n      },\n    };\n  }\n\n  return {\n    width: size.width - LETTER_CONTENT_LEFT_MARGIN - LETTER_CONTENT_RIGHT_MARGIN,\n    margin: {\n      left: LETTER_CONTENT_LEFT_MARGIN,\n      right: LETTER_CONTENT_RIGHT_MARGIN,\n    },\n  };\n\n  // 그외\n}\n\ninterface IInpRectSize {\n  letters: string[][];\n  size: {\n    width: number;\n    height: number;\n  };\n  margin: {\n    left: number;\n    right: number;\n  };\n}\n\nexport function getRectSize({\n  size,\n  letters,\n  margin,\n}: IInpRectSize): {\n  widths: ReturnType<typeof getCharWidthWithMargins>;\n  heights: Array<ReturnType<typeof getCharHeights>>;\n} {\n  // 6:4로 스크린 사이즈를 분할한다, 4는 좌우 2px씩 마진 입력\n  const marginSize = Math.floor(Math.round(size.width * 0.35));\n  const charSize = size.width - marginSize;\n\n  const charCountMedian = getCharCountMedian(letters.map((layout) => layout.length));\n  const widths = getCharWidths(charSize, letters.length);\n  const heights = widths.map((width, index) => {\n    if (index === 0) {\n      return getCharHeights(size.height, charCountMedian, width);\n    }\n\n    return getCharHeights(size.height, letters[index].length, width);\n  });\n\n  const widthsWithMargin = getCharWidthWithMargins(marginSize, widths);\n\n  log('W 계산: ', marginSize, charSize, widthsWithMargin);\n  log('H 계산: ', heights);\n\n  return { widths: widthsWithMargin, heights };\n}\n\nexport function isKoreanChar(content: string): boolean {\n  try {\n    return koreanReg.test(content);\n  } catch (err) {\n    log('isKoreanChar:');\n    log(err.message);\n    log(err.stack);\n\n    return false;\n  }\n}\n\nexport function getKorean(content: string): string[] {\n  try {\n    const korean = content.split('').filter((char) => isTrue(koreanReg.test(char)));\n    return korean;\n  } catch (err) {\n    log('getKorean:');\n    log(err.message);\n    log(err.stack);\n\n    return [];\n  }\n}\n\n/**\n * 세로 1줄에 들어갈 수 있는 최대 글자수는 30자\n */\nexport function getDoubleDimensionContent(koreansFrom: string | string[], rowsLength: number): string[][] {\n  const koreans = Array.isArray(koreansFrom) ? koreansFrom : koreansFrom.split('');\n  const chunked = chunk(koreans, rowsLength);\n  return chunked;\n}\n\nexport function shiftLayoutedContentLeft2Right(koreans: string[][], takeOutColumn: number, sizeFrom: number): string[][] {\n  if (takeOutColumn === koreans.length - 1) {\n    return koreans;\n  }\n\n  const lines = koreans.map((line) => [...line].filter((char) => char !== ''));\n  const size = sizeFrom > lines[0].length ? lines[0].length : sizeFrom;\n\n  const modified: string[][] = [];\n  let sliced: string[] = [];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const tmpLine = [...lines[i]];\n    const newLine = tmpLine.slice(size, tmpLine.length).concat(sliced);\n\n    sliced = tmpLine.slice(0, size);\n\n    if (i === lines.length - 1) {\n      modified.push([...sliced, ...newLine]);\n    } else {\n      modified.push(newLine);\n    }\n  }\n\n  return modified;\n}\n\nfunction percent(base: number, ratio: number): number {\n  return Math.floor(Math.ceil((base / ratio) * 100));\n}\n\nexport function getLastLineResize(contentFrom: string[][]): number | undefined {\n  const content = contentFrom.map((row) => [...row]);\n\n  const [maxRowSize] = content.map((row) => row.length).sort((left, right) => right - left);\n  const [minRowSize] = content.map((row) => row.length).sort((left, right) => left - right);\n  const colSize = content.length;\n\n  if (percent(minRowSize, maxRowSize) < 50) {\n    return undefined;\n  }\n\n  const lastColInfos = populate(colSize - 1, true).map((index) => ({\n    index,\n    size: minRowSize - (colSize - 1) * index,\n    ratio: percent(minRowSize - (colSize - 1) * index, maxRowSize + index),\n  }));\n\n  log('퍼센트: ', colSize, maxRowSize, minRowSize, Math.floor(Math.ceil(colSize / maxRowSize)) - 1, lastColInfos);\n\n  const sortedInfo = lastColInfos\n    .sort((left, right) => right.ratio - left.ratio)\n    .filter((info) => info.size > 0 && info.ratio > 20 && info.ratio < 60);\n\n  const [first] = sortedInfo;\n\n  return maxRowSize + first.index;\n}\n","import { atom } from 'recoil';\nimport type { ICounterState, ILayoutState, IWindowSizeState } from './ICounterState';\n\nexport const textCounterAtom = atom<ICounterState>({\n  key: 'textCounterAtom',\n  default: {\n    charCountType: 1,\n    newlineCountType: 1,\n    isSkipWhitespacee: true,\n    content: '',\n  },\n});\n\nexport const windowSizeAtom = atom<IWindowSizeState>({\n  key: 'windowSizeAtom',\n  default: {\n    width: 100,\n    height: 100,\n  },\n});\n\nexport const textLayoutAtom = atom<ILayoutState>({\n  key: 'textLayoutAtom',\n  default: {\n    maxRowSize: 7,\n    maxColSize: 1,\n    letters: [[''], [''], [''], [''], [''], [''], ['']],\n    character: {\n      margin: {\n        left: 20,\n        right: 20,\n      },\n      widths: [],\n      heights: [],\n    },\n  },\n});\n","import { isFalse } from 'my-easy-fp';\nimport { selector } from 'recoil';\nimport { getKorean, isKoreanChar } from '../../tools/calculator';\nimport { textCounterAtom } from '../atom/counter';\n\nconst whitespaceReg = /\\s/;\n\nexport const onlyKoreanCharCountSelector = selector<number>({\n  key: 'onlyKoreanCharCountSelector-dde4a13e',\n  get: ({ get }) => {\n    try {\n      const state = get(textCounterAtom);\n      const koreanChars = getKorean(state.content);\n      return koreanChars.length;\n    } catch (err) {\n      return 0;\n    }\n  },\n});\n\nexport const charCountState = selector<number>({\n  key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n  get: ({ get }) => {\n    const state = get(textCounterAtom);\n\n    let counted = 0;\n\n    for (let i = 0; i < state.content.length; i += 1) {\n      const char = state.content[i];\n\n      if (state.isSkipWhitespacee && whitespaceReg.test(char)) {\n        continue;\n      }\n\n      if (char === '\\n' && state.newlineCountType === 2) {\n        counted += 1;\n        continue;\n      } else if (char === '\\n' && state.newlineCountType === 3) {\n        counted += 2;\n        continue;\n      } else if (char === '\\n') {\n        continue;\n      }\n\n      const isKorean = isKoreanChar(char);\n\n      if (isKorean && state.charCountType === 4) {\n        counted += 3;\n      } else if (isFalse(isKorean) && state.charCountType === 4) {\n        counted += 1;\n      } else if (isKorean && state.charCountType === 3) {\n        counted += 2;\n      } else if (isFalse(isKorean) && state.charCountType === 3) {\n        counted += 1;\n      } else if (isKorean && state.charCountType === 2) {\n        counted += 1;\n      } else if (isFalse(isKorean) && state.charCountType === 2) {\n        counted += 0.5;\n      } else {\n        counted += 1;\n      }\n    }\n\n    return counted;\n  },\n});\n","import debug from 'debug';\n\nconst channel = 'seoye';\n\n/**\n * debug를 한 번 더 감싸주는 이유는 항상 debug가 동작하지 않게 하기 위함이다. 동작은 하는데 출력은 하지 않는 것과, noop function은\n * 성능차이를 만들기 때문에 production 에서는 debug가 아예 동작하지 않도록 wrapper를 만들어준다.\n *\n * @param channel 채널\n */\nexport default function llc(filename: string): debug.IDebugger {\n  if (process.env.NODE_ENV !== 'development') {\n    const nulllog: any = () => undefined;\n    return nulllog;\n  }\n\n  return debug(`${channel}:${filename.replace(/(\\/)(.+)(\\.ts|\\.tsx|\\.js|\\.jsx)/, '$2')}`);\n}\n"],"sourceRoot":""}