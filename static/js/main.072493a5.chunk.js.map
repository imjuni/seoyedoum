{"version":3,"sources":["pages/Counter.tsx","shared/components/ContentBox.tsx","shared/components/ControlBox.tsx","shared/components/ResizeBox.tsx","pages/Layout.tsx","tools/removeTrailingSlash.ts","pages/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx","recoil/atom/counter.ts","tools/calculator.ts","tools/llc.ts","recoil/selector/counter.ts"],"names":["log","llc","__filename","Counter","useRecoilState","textCounterAtom","textCounterState","setTextCounterState","textLayoutAtom","textLayoutState","setTextLayoutState","windowSizeAtom","windowSizeState","counted","useRecoilValue","charCountState","koreanChars","onlyKoreanCharCountSelector","subject","Subject","shared","pipe","share","debounceTime","subscribe","topic","length","getKorean","getPoemLayoutState","content","layouted","layout","flatted","map","sort","left","right","maxColSize","marginSize","Math","floor","round","width","charSize","charCountMedian","getCharCountMedian","widths","getCharWidths","heights","index","getCharHeights","height","widthsWithMargin","getCharWidthWithMargins","maxRowSize","character","Fragment","maxW","h","value","rows","onChange","event","next","target","templateColumns","templateRows","gap","colSpan","icon","charCountType","parseInt","isFalse","isNaN","rowSpan","newlineCountType","isChecked","isSkipWhitespacee","colorScheme","size","onClick","ContentBox","direction","style","paddingLeft","paddingRight","ii","marginRight","margin","jj","padding","lineHeight","fontSize","transform","scale","ControlBox","w","visibility","populate","type","ResizeBox","setWindowSizeState","throttleTime","filter","getPaperHeight","useEffect","window","addEventListener","innerWidth","innerHeight","display","Layout","removeTrailingSlash","url","replace","Navigation","prefix","history","useHistory","location","useLocation","as","IconButton","aria-label","Hamburger","variant","disabled","pathname","urljoin","stopPropagation","preventDefault","push","justifyContent","flexGrow","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","atom","key","default","koreanReg","counts","tail","reduce","prev","current","ceil","colSize","charWidth","marginCount","marginWidth","rawMarginWidth","clonedMarginWidth","shift","rowSize","charHeight","koreans","langLayout","getDoubleDimensionContent","newColSize","contentFrom","row","minRowSize","percent","lastColInfos","ratio","sortedInfo","info","first","getLastLineResize","refinedKoreans","isNotEmpty","reversed","reverse","maxSize","maxSize2","flatMap","flating","isKoreanChar","test","err","message","stack","split","char","isTrue","koreansFrom","rowsLength","Array","isArray","chunk","base","filename","whitespaceReg","selector","get","state","i","isKorean"],"mappings":"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","file":"static/js/main.072493a5.chunk.js","sourcesContent":["import { Box, Button, Container, Grid, GridItem, Select, Switch, Textarea } from '@chakra-ui/react';\nimport { isFalse } from 'my-easy-fp';\nimport React from 'react';\nimport { MdArrowDropDown } from 'react-icons/md';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Subject } from 'rxjs';\nimport { debounceTime, share } from 'rxjs/operators';\nimport { textCounterAtom, textLayoutAtom, windowSizeAtom } from '../recoil/atom/counter';\nimport { charCountState, onlyKoreanCharCountSelector } from '../recoil/selector/counter';\nimport ContentBox from '../shared/components/ContentBox';\nimport ControlBox from '../shared/components/ControlBox';\nimport ResizeBox from '../shared/components/ResizeBox';\nimport {\n  getCharCountMedian,\n  getCharHeights,\n  getCharWidths,\n  getCharWidthWithMargins,\n  getKorean,\n  getPoemLayoutState,\n} from '../tools/calculator';\nimport llc from '../tools/llc';\n\nconst log = llc(__filename);\n\nconst Counter: React.FC = () => {\n  const [textCounterState, setTextCounterState] = useRecoilState(textCounterAtom);\n  const [textLayoutState, setTextLayoutState] = useRecoilState(textLayoutAtom);\n  const [windowSizeState] = useRecoilState(windowSizeAtom);\n  const counted = useRecoilValue(charCountState);\n  const koreanChars = useRecoilValue(onlyKoreanCharCountSelector);\n\n  const subject = new Subject<string>();\n  const shared = subject.pipe(share());\n\n  shared.pipe(debounceTime(1000)).subscribe((topic) => {\n    if (topic.length < 10) {\n      return;\n    }\n\n    if (getKorean(topic).length < 10) {\n      return;\n    }\n\n    const { layout: layouted, flatted } = getPoemLayoutState({ content: topic });\n    const [maxColSize] = layouted.map((layout) => layout.length).sort((left, right) => right - left);\n\n    // 6:4로 스크린 사이즈를 분할한다, 4는 좌우 2px씩 마진 입력\n    const marginSize = Math.floor(Math.round(windowSizeState.width * 0.45)) + 12;\n    const charSize = windowSizeState.width - marginSize;\n\n    const charCountMedian = getCharCountMedian(layouted.map((layout) => layout.length));\n    const widths = getCharWidths(charSize, layouted.length);\n    const heights = widths.map((width, index) => {\n      if (index === 0) {\n        return getCharHeights(windowSizeState.height, charCountMedian, width);\n      }\n      return getCharHeights(windowSizeState.height, layouted[index].length, width);\n    });\n    const widthsWithMargin = getCharWidthWithMargins(marginSize, widths);\n\n    log('W 계산: ', marginSize, charSize, widths);\n    log('H 계산: ', heights);\n\n    setTextLayoutState({\n      ...textLayoutState,\n      maxColSize,\n      maxRowSize: layouted.length,\n      layouted,\n      flatted,\n      character: {\n        widths: widthsWithMargin,\n        heights,\n      },\n    });\n  });\n\n  shared.subscribe((topic) => {\n    setTextCounterState({ ...textCounterState, content: topic });\n  });\n\n  return (\n    <React.Fragment>\n      <Container maxW=\"container.lg\">\n        <Box h=\"20px\" />\n\n        <Box>\n          <Textarea value={textCounterState.content} rows={10} onChange={(event) => subject.next(event.target.value)} />\n\n          <Box h=\"10px\" />\n\n          <Grid templateColumns=\"repeat(6, 1fr)\" templateRows=\"repeat(3, 1fr)\" gap={4}>\n            <GridItem colSpan={4}>\n              <Select\n                icon={<MdArrowDropDown />}\n                value={textCounterState.charCountType}\n                onChange={(event) => {\n                  const charCountType = parseInt(event.target.value, 10);\n                  setTextCounterState({\n                    ...textCounterState,\n                    charCountType: isFalse(isNaN(charCountType)) ? charCountType : 1,\n                  });\n                }}\n              >\n                <option value=\"1\">모든 글자 1글자로 계산</option>\n                <option value=\"2\">한글 1글자, 영문 0.5글자 계산</option>\n                <option value=\"3\">바이트로 계산, 한글 2글자 영문 1글자</option>\n                <option value=\"4\">바이트로 계산, 한글 3글자 영문 1글자</option>\n              </Select>\n            </GridItem>\n\n            <GridItem rowSpan={2} colSpan={2}>\n              <section>\n                <span>{counted}글자</span>\n                <br />\n                <span>{koreanChars}글자(한글)</span>\n              </section>\n            </GridItem>\n\n            <GridItem colSpan={4}>\n              <Select\n                value={textCounterState.newlineCountType}\n                onChange={(event) => {\n                  const newlineCountType = parseInt(event.target.value, 10);\n                  setTextCounterState({\n                    ...textCounterState,\n                    newlineCountType: isFalse(isNaN(newlineCountType)) ? newlineCountType : 1,\n                  });\n                }}\n              >\n                <option value=\"1\">줄바꿈 0으로 계산</option>\n                <option value=\"2\">줄바꿈 1로 계산</option>\n                <option value=\"3\">줄바꿈 2로 계산</option>\n              </Select>\n            </GridItem>\n\n            <GridItem colSpan={4}>\n              <Switch\n                isChecked={textCounterState.isSkipWhitespacee}\n                onChange={() => {\n                  setTextCounterState({\n                    ...textCounterState,\n                    isSkipWhitespacee: isFalse(textCounterState.isSkipWhitespacee),\n                  });\n                }}\n              />\n              {' 띄어쓰기 제외'}\n            </GridItem>\n\n            <GridItem>\n              <Button\n                colorScheme=\"teal\"\n                size=\"md\"\n                onClick={() => {\n                  subject.next(textCounterState.content);\n                }}\n              >\n                다시 계산하기\n              </Button>\n            </GridItem>\n          </Grid>\n\n          <Box h=\"10px\" />\n        </Box>\n      </Container>\n\n      <ControlBox />\n      <ContentBox />\n      <ResizeBox />\n    </React.Fragment>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { Flex } from '@chakra-ui/react';\nimport { windowSizeAtom, textLayoutAtom } from '../../recoil/atom/counter';\n\nconst ContentBox: React.FC = () => {\n  const [windowSizeState] = useRecoilState(windowSizeAtom);\n  const [textLayoutState] = useRecoilState(textLayoutAtom);\n\n  return (\n    <Flex\n      direction=\"row\"\n      style={{ width: `${windowSizeState.width}px`, height: `${windowSizeState.height}px`, paddingLeft: 4, paddingRight: 8 }}\n    >\n      {textLayoutState.character.widths.map((width, ii) => {\n        return (\n          <div\n            style={{ width: `${width.width}px`, marginRight: `${width.margin}px`, height: `${windowSizeState.height}px}` }}\n          >\n            {textLayoutState.character.heights[ii].map((height, jj) => {\n              return (\n                <div style={{ width: `${width.width}px`, height: `${height.height}px` }}>\n                  <p\n                    style={{\n                      margin: 0,\n                      padding: 0,\n                      lineHeight: 1,\n                      fontSize: `${width.width}px`,\n                      transform: `scaleY(${height.scale / 100})`,\n                    }}\n                  >\n                    {textLayoutState.layouted[ii][jj]}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport default ContentBox;\n","import { Button, Grid, GridItem, Input } from '@chakra-ui/react';\nimport { populate } from 'my-easy-fp';\nimport React from 'react';\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { textLayoutAtom, windowSizeAtom } from '../../recoil/atom/counter';\nimport { onlyKoreanCharCountSelector } from '../../recoil/selector/counter';\n\nconst ControlBox: React.FC = () => {\n  const [windowSizeState] = useRecoilState(windowSizeAtom);\n  const [textLayoutState] = useRecoilState(textLayoutAtom);\n  const koreanChars = useRecoilValue(onlyKoreanCharCountSelector);\n\n  return (\n    <Grid\n      w={`${windowSizeState.width}px`}\n      style={{ visibility: koreanChars > 20 ? 'visible' : 'hidden' }}\n      templateColumns={`repeat(${textLayoutState.maxRowSize}, 1fr)`}\n      templateRows={`repeat(3, 1fr)`}\n      gap={0}\n    >\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Input\n              type=\"number\"\n              paddingLeft=\"5px\"\n              paddingRight=\"5px\"\n              size=\"md\"\n              value={textLayoutState.layouted[index].length}\n              onChange={() => {}}\n            />\n          </GridItem>\n        );\n      })}\n      {/* 좌측으로 글자를 보낸다  */}\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Button>\n              <FaAngleLeft />\n            </Button>\n          </GridItem>\n        );\n      })}\n      {/* 우측으로 글자를 보낸다 */}\n      {populate(textLayoutState.maxRowSize).map((index) => {\n        return (\n          <GridItem key={index}>\n            <Button>\n              <FaAngleRight />\n            </Button>\n          </GridItem>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default ControlBox;\n","import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { Subject } from 'rxjs';\nimport { debounceTime, filter, throttleTime } from 'rxjs/operators';\nimport { windowSizeAtom } from '../../recoil/atom/counter';\nimport type { IWindowSizeState } from '../../recoil/atom/ICounterState';\nimport llc from '../../tools/llc';\nimport { getPaperHeight } from '../../tools/calculator';\n\nconst log = llc(__filename);\n\nconst ResizeBox: React.FC = () => {\n  const [windowSizeState, setWindowSizeState] = useRecoilState(windowSizeAtom);\n  // subject를 useEffect에 넣으면 windowSizeState가 변하면서 subject를 계속 건드려서 resizing이 매우 많이 발생하게 된다\n  const subject = new Subject<IWindowSizeState>();\n\n  subject\n    .pipe(throttleTime(100))\n    .pipe(debounceTime(300))\n    .pipe(filter((size) => size.height !== windowSizeState.height || size.width !== windowSizeState.width))\n    .subscribe((size) => {\n      log('윈도우 폭 변경: ', size.width, size.height);\n      setWindowSizeState({ ...windowSizeState, width: size.width, height: getPaperHeight(size.width) });\n    });\n\n  useEffect(() => {\n    log('useEffect 뜬다: ');\n    window.addEventListener('resize', () => {\n      subject.next({ width: window.innerWidth, height: window.innerHeight });\n    });\n\n    setWindowSizeState({ ...windowSizeState, width: window.innerWidth, height: getPaperHeight(window.innerWidth) });\n  }, []);\n\n  return <div style={{ display: 'none' }}></div>;\n};\n\nexport default ResizeBox;\n","import React from 'react';\nimport { Container, Heading } from '@chakra-ui/react';\n\nconst Layout: React.FC = () => {\n  return (\n    <Container>\n      <Heading>문장 배열하기</Heading>\n    </Container>\n  );\n};\n\nexport default Layout;\n","export function removeTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '');\n}\n","import { HamburgerIcon } from '@chakra-ui/icons';\nimport { Center, Flex, Heading, IconButton, Menu, MenuButton, MenuItem, MenuList, Square } from '@chakra-ui/react';\nimport React from 'react';\nimport { FaListOl, FaSlidersH } from 'react-icons/fa';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from '../tools/removeTrailingSlash';\n\nconst Navigation: React.FC<{ prefix: string }> = ({ prefix }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Flex as=\"nav\">\n      <Center h=\"50px\" w=\"50px\">\n        <Menu>\n          <MenuButton as={IconButton} aria-label=\"Options\" icon={<HamburgerIcon />} variant=\"outline\" />\n\n          <MenuList>\n            <MenuItem\n              icon={<FaListOl />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/')) });\n              }}\n            >\n              글자 수 세기\n            </MenuItem>\n\n            <MenuItem\n              icon={<FaSlidersH />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/layout')) });\n              }}\n            >\n              문장 배열하기\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Center>\n\n      <Square style={{ marginRight: 35, justifyContent: 'center', flexGrow: 1 }}>\n        <Heading as=\"h1\">\n          서예 도움: {location.pathname === removeTrailingSlash(urljoin(prefix, '/')) ? '글자 수 세기' : '문장 배열하기'}\n        </Heading>\n      </Square>\n    </Flex>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Counter from './pages/Counter';\nimport Layout from './pages/Layout';\nimport Navigation from './pages/Navigation';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from './tools/removeTrailingSlash';\n\nconst prefix = '/seoyedoum';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Navigation prefix={prefix} />\n\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/layout'))}>\n          <Layout />\n        </Route>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/'))}>\n          <Counter />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { atom } from 'recoil';\nimport type { ICounterState, ILayoutState, IWindowSizeState } from './ICounterState';\n\nexport const textCounterAtom = atom<ICounterState>({\n  key: 'textCounterAtom',\n  default: {\n    charCountType: 1,\n    newlineCountType: 1,\n    isSkipWhitespacee: true,\n    content: '',\n  },\n});\n\nexport const windowSizeAtom = atom<IWindowSizeState>({\n  key: 'windowSizeAtom',\n  default: {\n    width: 100,\n    height: 100,\n  },\n});\n\nexport const textLayoutAtom = atom<ILayoutState>({\n  key: 'textLayoutAtom',\n  default: {\n    maxRowSize: 7,\n    maxColSize: 1,\n    flatted: [],\n    layouted: [[''], [''], [''], [''], [''], [''], ['']],\n    character: {\n      widths: [],\n      heights: [],\n    },\n  },\n});\n","import { chunk, isNotEmpty, isTrue, populate } from 'my-easy-fp';\nimport llc from './llc';\n\nexport const MEDIAN_KOREAN_CHAR_ROW_LENGTH = 20;\nconst koreanReg = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\nconst log = llc(__filename);\n\nexport function getCharCountMedian(counts: number[]) {\n  const [, ...tail] = counts.sort((left, right) => left - right);\n  return Math.floor(tail.reduce((prev, current) => prev + current) / (counts.length - 1));\n}\n\n/**\n * 전지는 A형(630 X 960 mm)과 B형 (780 X 1080 mm)이 있다. 자르는 횟수에 따라 숫자가 붙어 종이의 이름이 결정된다.\n * 예를들어 A1를 반으로 잘라서 두개로 나누면 A2이다. A형을 4등분(절)해서 나오는 크기가 가장 많이 사용하는 A4용지 이다.\n * @param width 폭\n */\nexport function getPaperHeight(width: number): number {\n  return Math.floor(Math.ceil(width * 1.52));\n}\n\n/**\n *\n * @param size 가로 전체 길이 (px)\n * @param colSize 가로에 몇 줄을 넣을 건지\n * @returns\n */\nexport function getCharWidths(size: number, colSize: number): number[] {\n  if (size / colSize === 0) {\n    return populate(colSize).map(() => size / colSize);\n  }\n\n  const charWidth = Math.floor(size / colSize);\n  const remainWidth = size - charWidth * (colSize - 1);\n\n  return [remainWidth, ...populate(colSize - 1).map(() => charWidth)];\n}\n\n/**\n *\n * @param size 마진 전체 길이\n * @param widths 계산된 가로 폭 배열\n * @returns\n */\nexport function getCharWidthWithMargins(size: number, widths: number[]): Array<{ width: number; margin: number }> {\n  const marginCount = widths.length - 1;\n\n  if (marginCount <= 0) {\n    return [];\n  }\n\n  const marginWidth = (() => {\n    const rawMarginWidth = size / marginCount;\n\n    if (size / marginCount === 0) {\n      return populate(marginCount).map(() => rawMarginWidth);\n    }\n\n    const marginWidth = Math.floor(rawMarginWidth);\n    const remainMarginWidth = size - marginWidth * (marginCount - 1);\n    return [remainMarginWidth, ...populate(marginCount - 1).map(() => marginWidth)];\n  })();\n\n  const clonedMarginWidth = [...marginWidth];\n\n  const charWidthWithMargins = widths.map((width) => {\n    return {\n      width,\n      margin: clonedMarginWidth.shift() ?? 0,\n    };\n  });\n\n  return charWidthWithMargins;\n}\n\n/**\n *\n * @param size 세로 전체 길이(px)\n * @param rowSize 몇 글자 들어가는지 전달\n * @param width 이미 계산된 한 글자의 폭\n */\nexport function getCharHeights(size: number, rowSize: number, width: number): Array<{ height: number; scale: number }> {\n  if (size / rowSize === 0) {\n    return populate(rowSize).map(() => {\n      const height = size / rowSize;\n\n      return {\n        height,\n        scale: Math.floor((height * 100) / width),\n      };\n    });\n  }\n\n  const charHeight = Math.floor(size / rowSize);\n  const remainHeight = size - charHeight * (rowSize - 1);\n\n  const heights = [remainHeight, ...populate(rowSize - 1).map(() => charHeight)];\n\n  return heights.map((height) => {\n    return {\n      height,\n      scale: Math.floor((height * 100) / width),\n    };\n  });\n}\n\nexport function flating(contentFrom: string[][]) {\n  const content = contentFrom.map((row) => [...row]);\n  const [maxSize] = content.map((row) => row.length).sort((left, right) => right - left);\n  const [maxSize2] = content.map((row) => row.length).sort((left, right) => left - right);\n\n  log('[flating]maxSize: ', maxSize, maxSize2);\n\n  return content\n    .map((row) => {\n      if (maxSize > row.length) {\n        return [...populate(maxSize - row.length).map(() => ''), ...row];\n      } else {\n        return row;\n      }\n    })\n    .flatMap((value) => value);\n}\n\nexport function getPoemLayoutState({ content }: { content: string }) {\n  const koreans = getKorean(content);\n  const langLayout = getDoubleDimensionContent(koreans, 20);\n  const newColSize = getLastLineResize(langLayout);\n  const refinedKoreans = isNotEmpty(newColSize) ? getDoubleDimensionContent(koreans, newColSize) : langLayout;\n  const reversed = [...refinedKoreans].reverse();\n  const flatted = flating(reversed);\n\n  return { layout: reversed, flatted };\n}\n\nexport function isKoreanChar(content: string): boolean {\n  try {\n    return koreanReg.test(content);\n  } catch (err) {\n    log('isKoreanChar:');\n    log(err.message);\n    log(err.stack);\n\n    return false;\n  }\n}\n\nexport function getKorean(content: string): string[] {\n  try {\n    const korean = content.split('').filter((char) => isTrue(koreanReg.test(char)));\n    return korean;\n  } catch (err) {\n    log('getKorean:');\n    log(err.message);\n    log(err.stack);\n\n    return [];\n  }\n}\n\n/**\n * 세로 1줄에 들어갈 수 있는 최대 글자수는 30자\n */\nexport function getDoubleDimensionContent(koreansFrom: string | string[], rowsLength: number): string[][] {\n  const koreans = Array.isArray(koreansFrom) ? koreansFrom : koreansFrom.split('');\n  const chunked = chunk(koreans, rowsLength);\n  return chunked;\n}\n\nexport function shiftLayoutedContentLeft2Right(koreans: string[][], takeOutColumn: number, sizeFrom: number): string[][] {\n  if (takeOutColumn === koreans.length - 1) {\n    return koreans;\n  }\n\n  const lines = koreans.map((line) => [...line].filter((char) => char !== ''));\n  const size = sizeFrom > lines[0].length ? lines[0].length : sizeFrom;\n\n  const modified: string[][] = [];\n  let sliced: string[] = [];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const tmpLine = [...lines[i]];\n    const newLine = tmpLine.slice(size, tmpLine.length).concat(sliced);\n\n    sliced = tmpLine.slice(0, size);\n\n    if (i === lines.length - 1) {\n      modified.push([...sliced, ...newLine]);\n    } else {\n      modified.push(newLine);\n    }\n  }\n\n  return modified;\n}\n\nfunction percent(base: number, ratio: number): number {\n  return Math.floor(Math.ceil((base / ratio) * 100));\n}\n\nexport function getLastLineResize(contentFrom: string[][]): number | undefined {\n  const content = contentFrom.map((row) => [...row]);\n\n  const [maxRowSize] = content.map((row) => row.length).sort((left, right) => right - left);\n  const [minRowSize] = content.map((row) => row.length).sort((left, right) => left - right);\n  const colSize = content.length;\n\n  if (percent(minRowSize, maxRowSize) < 50) {\n    return undefined;\n  }\n\n  const lastColInfos = populate(colSize - 1, true).map((index) => ({\n    index,\n    size: minRowSize - (colSize - 1) * index,\n    ratio: percent(minRowSize - (colSize - 1) * index, maxRowSize + index),\n  }));\n\n  log('퍼센트: ', colSize, maxRowSize, minRowSize, Math.floor(Math.ceil(colSize / maxRowSize)) - 1, lastColInfos);\n\n  const sortedInfo = lastColInfos\n    .sort((left, right) => right.ratio - left.ratio)\n    .filter((info) => info.size > 0 && info.ratio > 20 && info.ratio < 60);\n\n  const [first] = sortedInfo;\n\n  return maxRowSize + first.index;\n}\n","import debug from 'debug';\n\nconst channel = 'seoye';\n\n/**\n * debug를 한 번 더 감싸주는 이유는 항상 debug가 동작하지 않게 하기 위함이다. 동작은 하는데 출력은 하지 않는 것과, noop function은\n * 성능차이를 만들기 때문에 production 에서는 debug가 아예 동작하지 않도록 wrapper를 만들어준다.\n *\n * @param channel 채널\n */\nexport default function llc(filename: string): debug.IDebugger {\n  if (process.env.NODE_ENV !== 'development') {\n    const nulllog: any = () => undefined;\n    return nulllog;\n  }\n\n  return debug(`${channel}:${filename.replace(/(\\/)(.+)(\\.ts|\\.tsx|\\.js|\\.jsx)/, '$2')}`);\n}\n","import { isFalse } from 'my-easy-fp';\nimport { selector } from 'recoil';\nimport { getKorean, isKoreanChar } from '../../tools/calculator';\nimport { textCounterAtom } from '../atom/counter';\n\nconst whitespaceReg = /\\s/;\n\nexport const onlyKoreanCharCountSelector = selector<number>({\n  key: 'onlyKoreanCharCountSelector-dde4a13e',\n  get: ({ get }) => {\n    try {\n      const state = get(textCounterAtom);\n      const koreanChars = getKorean(state.content);\n      return koreanChars.length;\n    } catch (err) {\n      return 0;\n    }\n  },\n});\n\nexport const charCountState = selector<number>({\n  key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n  get: ({ get }) => {\n    const state = get(textCounterAtom);\n\n    let counted = 0;\n\n    for (let i = 0; i < state.content.length; i += 1) {\n      const char = state.content[i];\n\n      if (state.isSkipWhitespacee && whitespaceReg.test(char)) {\n        continue;\n      }\n\n      if (char === '\\n' && state.newlineCountType === 2) {\n        counted += 1;\n        continue;\n      } else if (char === '\\n' && state.newlineCountType === 3) {\n        counted += 2;\n        continue;\n      } else if (char === '\\n') {\n        continue;\n      }\n\n      const isKorean = isKoreanChar(char);\n\n      if (isKorean && state.charCountType === 4) {\n        counted += 3;\n      } else if (isFalse(isKorean) && state.charCountType === 4) {\n        counted += 1;\n      } else if (isKorean && state.charCountType === 3) {\n        counted += 2;\n      } else if (isFalse(isKorean) && state.charCountType === 3) {\n        counted += 1;\n      } else if (isKorean && state.charCountType === 2) {\n        counted += 1;\n      } else if (isFalse(isKorean) && state.charCountType === 2) {\n        counted += 0.5;\n      } else {\n        counted += 1;\n      }\n    }\n\n    return counted;\n  },\n});\n"],"sourceRoot":""}