{"version":3,"sources":["tools/llc.ts","pages/Counter.tsx","pages/Layout.tsx","tools/removeTrailingSlash.ts","pages/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx","recoil/atom/counter.ts","recoil/selector/counter.ts"],"names":["llc","filename","Layout","useRecoilState","textCounterAtom","textCounterState","setTextCounterState","textLayoutAtom","textLayoutState","setTextLayoutState","counted","useRecoilValue","charCountState","subject","Subject","shared","pipe","share","debounceTime","subscribe","topic","length","getKorean","getPoemLayoutState","content","layoutLine","layoutLength","layouted","layout","flatted","map","sort","first","maxLineLength","maxW","h","value","rows","onChange","event","next","target","templateColumns","templateRows","gap","colSpan","icon","charCountType","parseInt","isFalse","isNaN","rowSpan","newlineCountType","isChecked","isSkipWhitespacee","colorScheme","size","onClick","Array","fill","_","index","justifyContent","display","w","Math","floor","style","margin","padding","fontSize","removeTrailingSlash","url","replace","Navigation","prefix","history","useHistory","location","useLocation","as","IconButton","aria-label","Hamburger","variant","disabled","pathname","urljoin","stopPropagation","preventDefault","push","marginRight","flexGrow","App","path","Counter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","atom","key","default","koreanReg","whitespaceReg","log","__filename","korean","i","test","poem","newLayoutLine","lineCharCount","ceil","round","langLayout","reduce","sum","current","pos","isEmpty","reversed","reverse","row","j","selector","get","state","char","isKorean"],"mappings":"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","file":"static/js/main.f18c4442.chunk.js","sourcesContent":["import debug from 'debug';\n\nconst channel = 'seoye';\n\n/**\n * debug를 한 번 더 감싸주는 이유는 항상 debug가 동작하지 않게 하기 위함이다. 동작은 하는데 출력은 하지 않는 것과, noop function은\n * 성능차이를 만들기 때문에 production 에서는 debug가 아예 동작하지 않도록 wrapper를 만들어준다.\n *\n * @param channel 채널\n */\nexport default function llc(filename: string): debug.IDebugger {\n  if (process.env.NODE_ENV !== 'development') {\n    const nulllog: any = () => undefined;\n    return nulllog;\n  }\n\n  return debug(`${channel}:${filename.replace(/(\\/)(.+)(\\.ts|\\.tsx|\\.js|\\.jsx)/, '$2')}`);\n}\n","import { Box, Button, Container, Grid, GridItem, Input, Select, Switch, Textarea } from '@chakra-ui/react';\nimport { isFalse } from 'my-easy-fp';\nimport React from 'react';\nimport { FaAngleDown, FaAngleUp } from 'react-icons/fa';\nimport { MdArrowDropDown } from 'react-icons/md';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Subject } from 'rxjs';\nimport { debounceTime, share } from 'rxjs/operators';\nimport { textCounterAtom, textLayoutAtom } from '../recoil/atom/counter';\nimport { charCountState, getKorean, getPoemLayoutState } from '../recoil/selector/counter';\n\nconst Layout: React.FC = () => {\n  const [textCounterState, setTextCounterState] = useRecoilState(textCounterAtom);\n  const [textLayoutState, setTextLayoutState] = useRecoilState(textLayoutAtom);\n  const counted = useRecoilValue(charCountState);\n  const subject = new Subject<string>();\n  const shared = subject.pipe(share());\n\n  shared.pipe(debounceTime(1000)).subscribe((topic) => {\n    if (topic.length < 10) {\n      return;\n    }\n\n    if (getKorean(topic).length < 10) {\n      return;\n    }\n\n    const { layout: layouted, flatted } = getPoemLayoutState({ content: topic, layoutLine: textLayoutState.layoutLength });\n    const [first] = layouted.map((layout) => layout.length).sort();\n\n    setTextLayoutState({ ...textLayoutState, maxLineLength: first, layoutLength: layouted.length, layouted, flatted });\n  });\n\n  shared.subscribe((topic) => {\n    setTextCounterState({ ...textCounterState, content: topic });\n  });\n\n  return (\n    <Container maxW=\"container.lg\">\n      <Box h=\"20px\" />\n\n      <Box>\n        <Textarea value={textCounterState.content} rows={10} onChange={(event) => subject.next(event.target.value)} />\n\n        <Box h=\"10px\" />\n\n        <Grid templateColumns=\"repeat(6, 1fr)\" templateRows=\"repeat(3, 1fr)\" gap={4}>\n          <GridItem colSpan={4}>\n            <Select\n              icon={<MdArrowDropDown />}\n              value={textCounterState.charCountType}\n              onChange={(event) => {\n                const charCountType = parseInt(event.target.value, 10);\n                setTextCounterState({\n                  ...textCounterState,\n                  charCountType: isFalse(isNaN(charCountType)) ? charCountType : 1,\n                });\n              }}\n            >\n              <option value=\"1\">모든 글자 1글자로 계산</option>\n              <option value=\"2\">한글 1글자, 영문 0.5글자 계산</option>\n              <option value=\"3\">바이트로 계산, 한글 2글자 영문 1글자</option>\n              <option value=\"4\">바이트로 계산, 한글 3글자 영문 1글자</option>\n            </Select>\n          </GridItem>\n\n          <GridItem rowSpan={2} colSpan={2}>\n            {counted}글자\n          </GridItem>\n\n          <GridItem colSpan={4}>\n            <Select\n              value={textCounterState.newlineCountType}\n              onChange={(event) => {\n                const newlineCountType = parseInt(event.target.value, 10);\n                setTextCounterState({\n                  ...textCounterState,\n                  newlineCountType: isFalse(isNaN(newlineCountType)) ? newlineCountType : 1,\n                });\n              }}\n            >\n              <option value=\"1\">줄바꿈 0으로 계산</option>\n              <option value=\"2\">줄바꿈 1로 계산</option>\n              <option value=\"3\">줄바꿈 2로 계산</option>\n            </Select>\n          </GridItem>\n\n          <GridItem colSpan={4}>\n            <Switch\n              isChecked={textCounterState.isSkipWhitespacee}\n              onChange={() => {\n                setTextCounterState({ ...textCounterState, isSkipWhitespacee: isFalse(textCounterState.isSkipWhitespacee) });\n              }}\n            />\n            {' 띄어쓰기 제외'}\n          </GridItem>\n\n          <GridItem>\n            <Button\n              colorScheme=\"teal\"\n              size=\"md\"\n              onClick={() => {\n                subject.next(textCounterState.content);\n              }}\n            >\n              다시 계산하기\n            </Button>\n          </GridItem>\n        </Grid>\n\n        <Box h=\"10px\" />\n\n        <Grid templateColumns={`repeat(${textLayoutState.layoutLength}, 1fr)`} templateRows={`repeat(3, 1fr)`} gap={1}>\n          {new Array(textLayoutState.layoutLength).fill(0).map((_, index) => {\n            return (\n              <GridItem key={index} justifyContent=\"center\" display=\"flex\">\n                <Button\n                  w={`${Math.floor(100 / textLayoutState.layoutLength) - 3}vw`}\n                  onClick={() => {\n                    return false;\n                    // const layouted = [...textLayoutState.layouted];\n                    // let char = layouted[index].pop();\n\n                    // for (let i = index - 1; i >= 0; i -= 1) {\n                    //   if (isNotEmpty(char)) {\n                    //     layouted[index].push(char);\n                    //   }\n\n                    //   char = layouted[index].pop();\n                    // }\n\n                    // const flatted = [];\n\n                    // for (let j = 0; j < textLayoutState.maxLineLength; j += 1) {\n                    //   for (let i = 0; i < layouted.length; i += 1) {\n                    //     flatted.push(layouted[i][j]);\n                    //   }\n                    // }\n\n                    // setTextLayoutState({ ...textLayoutState, layouted, flatted });\n                  }}\n                >\n                  <FaAngleUp />\n                </Button>\n              </GridItem>\n            );\n          })}\n          {new Array(textLayoutState.layoutLength).fill(0).map((_, index) => {\n            return (\n              <GridItem key={index}>\n                <Input size=\"md\" value={textLayoutState.layouted[index].length} />\n              </GridItem>\n            );\n          })}\n          {new Array(textLayoutState.layoutLength).fill(0).map((_, index) => {\n            return (\n              <GridItem key={index} justifyContent=\"center\" display=\"flex\">\n                <Button w={`${Math.floor(100 / textLayoutState.layoutLength) - 3}vw`}>\n                  <FaAngleDown />\n                </Button>\n              </GridItem>\n            );\n          })}\n        </Grid>\n        <Grid\n          templateColumns={`repeat(${textLayoutState.layoutLength}, 1fr)`}\n          templateRows={`repeat(${textLayoutState.maxLineLength}, 1fr)`}\n          gap={1}\n        >\n          {new Array(textLayoutState.layoutLength * textLayoutState.maxLineLength).fill(0).map((_, index) => {\n            return (\n              <GridItem key={index}>\n                <section style={{ margin: 0, padding: 0 }}>\n                  <p style={{ margin: 0, padding: 0, fontSize: `${Math.floor(100 / textLayoutState.layoutLength) - 3}vw` }}>\n                    {textLayoutState.flatted[index]}\n                  </p>\n                </section>\n              </GridItem>\n            );\n          })}\n        </Grid>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Container, Heading } from '@chakra-ui/react';\n\nconst Layout: React.FC = () => {\n  return (\n    <Container>\n      <Heading>문장 배열하기</Heading>\n    </Container>\n  );\n};\n\nexport default Layout;\n","export function removeTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '');\n}\n","import { HamburgerIcon } from '@chakra-ui/icons';\nimport { Center, Flex, Heading, IconButton, Menu, MenuButton, MenuItem, MenuList, Square } from '@chakra-ui/react';\nimport React from 'react';\nimport { FaListOl, FaSlidersH } from 'react-icons/fa';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from '../tools/removeTrailingSlash';\n\nconst Navigation: React.FC<{ prefix: string }> = ({ prefix }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Flex as=\"nav\">\n      <Center h=\"50px\" w=\"50px\">\n        <Menu>\n          <MenuButton as={IconButton} aria-label=\"Options\" icon={<HamburgerIcon />} variant=\"outline\" />\n\n          <MenuList>\n            <MenuItem\n              icon={<FaListOl />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/')) });\n              }}\n            >\n              글자 수 세기\n            </MenuItem>\n\n            <MenuItem\n              icon={<FaSlidersH />}\n              as=\"div\"\n              disabled={removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))}\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                if (removeTrailingSlash(location.pathname) === removeTrailingSlash(urljoin(prefix, '/layout'))) {\n                  return;\n                }\n\n                history.push({ pathname: removeTrailingSlash(urljoin(prefix, '/layout')) });\n              }}\n            >\n              문장 배열하기\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Center>\n\n      <Square style={{ marginRight: 35, justifyContent: 'center', flexGrow: 1 }}>\n        <Heading as=\"h1\">\n          서예 도움: {location.pathname === removeTrailingSlash(urljoin(prefix, '/')) ? '글자 수 세기' : '문장 배열하기'}\n        </Heading>\n      </Square>\n    </Flex>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Counter from './pages/Counter';\nimport Layout from './pages/Layout';\nimport Navigation from './pages/Navigation';\nimport urljoin from 'url-join';\nimport { removeTrailingSlash } from './tools/removeTrailingSlash';\n\nconst prefix = '/seoyedoum';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Navigation prefix={prefix} />\n\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/layout'))}>\n          <Layout />\n        </Route>\n        <Route path={removeTrailingSlash(urljoin(prefix, '/'))}>\n          <Counter />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { atom } from 'recoil';\nimport type { ICounterState, ILayoutState } from './ICounterState';\n\nexport const textCounterAtom = atom<ICounterState>({\n  key: 'textCounterAtom',\n  default: {\n    charCountType: 1,\n    newlineCountType: 1,\n    isSkipWhitespacee: true,\n    content: '',\n  },\n});\n\nexport const textLayoutAtom = atom<ILayoutState>({\n  key: 'textLayoutAtom',\n  default: {\n    layoutLength: 7,\n    maxLineLength: 1,\n    flatted: [],\n    layouted: [[''], [''], [''], [''], [''], [''], ['']],\n  },\n});\n","import { isEmpty, isFalse } from 'my-easy-fp';\nimport { selector } from 'recoil';\nimport llc from '../../tools/llc';\nimport { textCounterAtom } from '../atom/counter';\n\nconst koreanReg = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\nconst whitespaceReg = /\\s/;\nconst log = llc(__filename);\n\nexport function getKorean(content: string): string[] {\n  let korean = [];\n\n  for (let i = 0; i < content.length; i += 1) {\n    if (koreanReg.test(content[i])) {\n      korean.push(content[i]);\n    }\n  }\n\n  return korean;\n}\n\nexport function getPoemLayoutState({ content, layoutLine }: { content: string; layoutLine: number }) {\n  const poem = [];\n  let newLayoutLine = layoutLine;\n\n  for (let i = 0; i < content.length; i += 1) {\n    if (koreanReg.test(content[i])) {\n      poem.push(content[i]);\n    }\n  }\n\n  let lineCharCount = Math.ceil(poem.length / newLayoutLine);\n\n  for (let i = 0; i < 100; i += 1) {\n    lineCharCount = Math.ceil(poem.length / newLayoutLine);\n\n    if (lineCharCount > 15) {\n      break;\n    }\n\n    newLayoutLine -= 1;\n  }\n\n  lineCharCount = Math.ceil(poem.length / newLayoutLine);\n\n  for (let i = 0; i < 100; i += 1) {\n    if (Math.floor(poem.length / lineCharCount) === Math.floor(Math.round(poem.length / lineCharCount))) {\n      break;\n    }\n\n    lineCharCount += 1;\n  }\n\n  const langLayout = poem.reduce<string[][]>((sum, current, index) => {\n    const pos = Math.floor(index / lineCharCount);\n    sum[pos] = isEmpty(sum[pos]) ? [] : sum[pos];\n    sum[pos].push(current);\n    return sum;\n  }, []);\n\n  const reversed = [...langLayout].reverse();\n  const [first] = reversed.map((row) => row.length).sort();\n\n  const flatted = [];\n\n  for (let j = 0; j < first; j += 1) {\n    for (let i = 0; i < reversed.length; i += 1) {\n      flatted.push(reversed[i][j]);\n    }\n  }\n\n  log('평탄화: ', flatted);\n  return { layout: reversed, flatted };\n}\n\nexport const charCountState = selector<number>({\n  key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n  get: ({ get }) => {\n    const state = get(textCounterAtom);\n\n    let counted = 0;\n\n    for (let i = 0; i < state.content.length; i += 1) {\n      const char = state.content[i];\n\n      if (state.isSkipWhitespacee && whitespaceReg.test(char)) {\n        continue;\n      }\n\n      if (char === '\\n' && state.newlineCountType === 2) {\n        counted += 1;\n        continue;\n      } else if (char === '\\n' && state.newlineCountType === 3) {\n        counted += 2;\n        continue;\n      } else if (char === '\\n') {\n        continue;\n      }\n\n      const isKorean = koreanReg.test(char);\n\n      if (isKorean && state.charCountType === 4) {\n        counted += 3;\n      } else if (isFalse(isKorean) && state.charCountType === 4) {\n        counted += 1;\n      } else if (isKorean && state.charCountType === 3) {\n        counted += 2;\n      } else if (isFalse(isKorean) && state.charCountType === 3) {\n        counted += 1;\n      } else if (isKorean && state.charCountType === 2) {\n        counted += 1;\n      } else if (isFalse(isKorean) && state.charCountType === 2) {\n        counted += 0.5;\n      } else {\n        counted += 1;\n      }\n    }\n\n    return counted;\n  },\n});\n"],"sourceRoot":""}